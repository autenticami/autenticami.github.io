{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Autenticami","text":"<p><code>Autenticami</code> A Multi-Account and Multi-Tenant Policy-Based Access Control Platform to enable a modern Identity-Based Access Control.</p> <p>As an <code>Autenticami administrator</code> you can create multiple accounts and create multiple projects within each account.</p> <p>All you have to do is describe your project's <code>resources</code> within your account and create your own access control policies. Resources are organized into project's domains.</p> <p><code>Autenticami</code> allows to specify who or what can access resources by the means of fine-grained permissions:</p> <ul> <li><code>Who</code>: Identities (Users and Roles) authenticated in the application</li> <li><code>Can Access</code>: Permissions granted by attaching policies</li> <li><code>Resources</code>: Resources targeted by permissions</li> </ul> <p>To enforce the access control process, the application implements the Policy Enforcement Point using the available SDKs</p> <p>Below is a sample policy document for granting access to the Employee and Timesheet resources of an HR project (hr-app):</p> <pre><code>{\n  \"Syntax\": \"autenticami1\",\n  \"Name\": \"person-base-reader\",\n  \"Type\": \"AC\",\n  \"Permit\": [\n    {\n      \"Name\": \"permit-hr:person:reader:any\",\n      \"Actions\": [\n        \"person:ListEmployee\",\n        \"person:ReadEmployee\"\n      ],\n      \"Resources\": [\n        \"uur:581616507495:default:hr-app:organisation:person/*\"\n      ]\n    },\n    {\n      \"Name\": \"permit-hr:timesheet:writer:any\",\n      \"Actions\": [\n        \"person:ReadTimesheet\",\n        \"person:CreateTimesheet\",\n        \"person:UpdateTimesheet\",\n        \"person:DeleteTimesheet\"\n      ],\n      \"Resources\": [\n        \"uur:581616507495:default:hr-app:time-management:person/*\"\n      ],\n      \"Condition\": \"DateGreaterThan({{.Autenticami.TokenIssueTime}})' &amp;&amp; DateLessThan('{{.Autenticami.CurrentTime}}': '2023-12-31T23:59:59Z')\"\n    }\n  ],\n  \"Forbid\": [\n    {\n      \"Name\": \"forbid-write-hr:timesheet:writer:bc182146-1598-4fde-99aa-b2d4d08bc1e2\",\n      \"Actions\": [\n        \"person:Read\"\n      ],\n      \"Resources\": [\n        \"uur:581616507495:default:hr-app:time-management:person/bc182146-1598-4fde-99aa-b2d4d08bc1e2\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"concepts/","title":"Concepts","text":"<p><code>Autenticami</code> is composed of several components.</p> <ul> <li>Identity Provider (IDP): The IDP takes care of exchanging the third-party token with an autenticami token. Through this service it is possible to assume a role identity.</li> <li>Policy Decision Point (PDP): The PDP is responsible for evaluating policies and deciding whether an identity can perform an action. Policies are retrieved through the PAP.</li> <li>Policy Administration Point (PAP): The PAP is responsible for managing and distributing policies.</li> <li>Account Administration Point (AAP): The AAP is responsible for account and project management.</li> <li>Policy Enforcement Point (PEP): The PEP is responsible for enforcing policies.</li> </ul> <p>INFO</p> <p>Identity Provider has to be configured with a plugin that implements the integration with an external identity provider.</p>"},{"location":"concepts/#applicative-flow","title":"Applicative Flow","text":"<p>An Autenticami application flow can be summarized with the following steps:</p> <ul> <li>The Developer configures the Account and its Projects using the AAP.</li> <li>The Application autenticates with the external identity and swaps the external token with an autenticami token using the IDP.</li> <li>Optionally the application assume a role by the means of the IDP.</li> <li>The Application use an Autenticami SDK to act as a PEP and check the permissions with the PDP.</li> <li>The PDP retrieves policies and attributes from the PAP.</li> <li>The PEP evaluates the policies and attributes and evaluate whether the identity can perform the action or not.</li> </ul> <p>The following diagram shows the applicative flow of an application using <code>Autenticami</code>.</p> <p></p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Let's take an HR project as an example. As a developer you need to:</p> <ul> <li>Create an Account</li> <li>Create Identities</li> <li>Configure a Project</li> <li>Create Projects and Domains</li> <li>Create Resources and Actions</li> <li>Create Permissions and Policies</li> <li>Implement a Policy Enforcement Point via SDK</li> </ul>"},{"location":"getting-started/#create-an-account","title":"Create an Account","text":"<p>The very first step is to create an account.</p> ACCOUNT EMAIL ACCOUNT NUMBER john@example.com 581616507495"},{"location":"getting-started/#create-identities","title":"Create Identities","text":"<p>Naturally, it is required to create identities and associate them with a tenant.</p> IDENTITY TYPE UUR USER uur:581616507495:default:autenticami:iam:user/john ROLE uur:581616507495:default:autenticami:iam:role/manager ROLE uur:581616507495:default:autenticami:iam:role/employee"},{"location":"getting-started/#configure-a-project","title":"Configure a Project","text":""},{"location":"getting-started/#create-projects-and-domains","title":"Create Projects and Domains","text":"<p>Once the account has been created you can proceed with the creation of project and its domains.</p> PROJECT NAME CODE HR Application hr-app <p>At this stage of the development the HR project has two domains:</p> <ul> <li>OrganisationManagement: The corporate organisation management for the employees</li> <li>TimeManagement: Time managament for the users.</li> </ul> <p>Morever we have a single resource which is <code>person</code> that is available on both domains.</p>"},{"location":"getting-started/#create-resources-and-actions","title":"Create Resources and Actions","text":"<p>Finally for each reasource you need to create actions.</p> ACTION ORGANISATION-MANAGEMENT TIME-MANAGEMENT person:ReadTimesheet YES person:CreateTimesheet YES person:UpdateTimesheet YES person:DeleteTimesheet YES person:ListEmployee YES person:ReadEmployee YES"},{"location":"getting-started/#create-permissions-and-policies","title":"Create Permissions and Policies","text":"<p>At this point, all that remains is to grant the permissions by creating policies and assigning them to the identities.</p> <pre><code># Autenticami\n\n&lt;div style=\"background-color:#111111;text-align:justify;}\"&gt;\n  &lt;img src=\"assets/images/autenticami-black-logo.png\" width=\"250px\" height=\"auto\"/&gt;\n&lt;/div&gt;\n\n\n`Autenticami` A Multi-Account and Multi-Tenant Policy-Based Access Control Platform to enable a modern Identity-Based Access Control.\n\nAs an `Autenticami administrator` you can create multiple accounts and create multiple projects within each account.\n\nAll you have to do is describe your project's `resources` within your account and create your own access control policies. Resources are organized into project's domains.\n\n`Autenticami` allows to specify who or what can access resources by the means of fine-grained permissions:\n\n- `Who`: *Identities (Users and Roles) authenticated in the application*\n- `Can Access`: *Permissions granted by attaching policies*\n- `Resources`: *Resources targeted by permissions*\n\nTo enforce the access control process, the application implements the Policy Enforcement Point using the available SDKs\n\nBelow is a sample policy document for granting access to the Employee and Timesheet resources of an HR project (hr-app):\n\n```json linenums=\"1\"\n{\n  \"Syntax\": \"autenticami1\",\n  \"Name\": \"person-base-reader\",\n  \"Type\": \"AC\",\n  \"Permit\": [\n    {\n      \"Name\": \"permit-hr:person:reader:any\",\n      \"Actions\": [\n        \"person:ListEmployee\",\n        \"person:ReadEmployee\"\n      ],\n      \"Resources\": [\n        \"uur:581616507495:default:hr-app:organisation:person/*\"\n      ]\n    },\n    {\n      \"Name\": \"permit-hr:timesheet:writer:any\",\n      \"Actions\": [\n        \"person:ReadTimesheet\",\n        \"person:CreateTimesheet\",\n        \"person:UpdateTimesheet\",\n        \"person:DeleteTimesheet\"\n      ],\n      \"Resources\": [\n        \"uur:581616507495:default:hr-app:time-management:person/*\"\n      ],\n      \"Condition\": \"DateGreaterThan({{.Autenticami.TokenIssueTime}})' &amp;&amp; DateLessThan('{{.Autenticami.CurrentTime}}': '2023-12-31T23:59:59Z')\"\n    }\n  ],\n  \"Forbid\": [\n    {\n      \"Name\": \"forbid-write-hr:timesheet:writer:bc182146-1598-4fde-99aa-b2d4d08bc1e2\",\n      \"Actions\": [\n        \"person:Read\"\n      ],\n      \"Resources\": [\n        \"uur:581616507495:default:hr-app:time-management:person/bc182146-1598-4fde-99aa-b2d4d08bc1e2\"\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"getting-started/#implement-a-policy-enforcement-point-via-sdk","title":"Implement a Policy Enforcement Point via SDK","text":"<p>Once everything is configured, you can go ahead with the integration into your project. This can be done using an Autenticami SDK for your project language.</p> <p>Below is an example of integration in a python project with fastapi.</p> <pre><code>@router.get(\n    '/employees',\n    response_model=list[DTOEmployeeResponse],\n    response_description='Get all employees',\n    status_code=status.HTTP_200_OK,\n    tags=['hr-app'],\n)\nasync def get_employees(\n\n    iam_context: IAMHrContext = Depends(get_current_iam_context)\n):\n    \"\"\"\n    Retrieve list of the employees\n    \"\"\"\n    try:\n        iam_profile = iam_context.iam_profile\n        if not iam_context.iam_provider.can_list_employees(iam_profile):\n            raise IAMUnauthorizedException('User has not been granted permissions to list employees')\n        ...\n        # Here your code\n        ...\n        return dto_employees\n    except IAMUnauthorizedException as e:\n        logger.error(e, exc_info=True, stack_info=True)\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=e.args[0])\n    except Exception as e:\n        logger.error(e, exc_info=True, stack_info=True)\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail='Internal Server Error')\n</code></pre>"},{"location":"access-management/policies/","title":"Policies","text":"<p>Autenticami allows the creation of <code>Policies</code> that can be associated with an identity to ensure that it has the proper permissions to access resources.</p> <p>In particular policies are <code>Identity-based policies</code> as they can be attached only to identities.</p> <p><code>Policies</code> are implemented in the form of documents that define a list of policy statements that can be permitted or fobidden.</p> <p>It is possible to divide the policies into several documents and these will be aggregated during the evaluation phase</p> <p>There are two types of policies:</p> <ul> <li>Policies</li> <li>Principal Trust Identity Policy</li> <li>Access Control Policy</li> <li>Policy Statement</li> </ul>"},{"location":"access-management/policies/#principal-trust-identity-policy","title":"Principal Trust Identity Policy","text":"<p>A <code>Principal Trust Identity Policy (TRUST)</code> defines which principal can assume the role, and under which conditions.</p>"},{"location":"access-management/policies/#access-control-policy","title":"Access Control Policy","text":"<p>An <code>Access Control Policy (AC)</code> lists the actions that can/cannot be performed and the resourcers those actions can affect.</p> <p>INFO</p> <p>Identities are themselves resources that can be target of <code>policies</code> actions.</p> <p><code>Permissions</code> permit identities to access a resource or execute a specific action and they are granted through the association of policies.</p> <p>Policies enable two types of permission-based access control:</p> <ul> <li>Role-Based access control (RBAC): Permission-based on role. For each identity, the collections of policies are listed.</li> <li>Attribute-based access control (ABAC): Permission-based on resource attributes. Each identity is associated with one or more tags and automatically has access to all resources that belong to the same tags.</li> </ul> <p>INFO</p> <p>Autenticami implements a Least-Privilege Model, hence an identity can't access anything until permissions are granted.</p> <p>There are two types of policies:</p> <ul> <li>Inline: policies associated inline to the definition of the identity</li> <li>Managed: policies associated and managed outside the identity, so they can be shared across multiple identities.</li> </ul>"},{"location":"access-management/policies/#policy-statement","title":"Policy Statement","text":"<p>A policy statement list actions associated to resources.</p>"},{"location":"access-management/reference/policies/v1/","title":"Syntax autenticami1","text":"<p>This is the validated version number 1.</p>"},{"location":"access-management/reference/policies/v1/json-elements/","title":"Policies Json Elements","text":"<p>A policy is a json document.</p>"},{"location":"accounts/accounts/","title":"Accounts","text":"<p>An Account is identified by an <code>account number</code> and it is responsible for <code>Identities</code> (Users, Groups, Roles), <code>Projects</code>, <code>Domains</code>, <code>Resources</code>, <code>Policies and Permissions for Access Management</code>.</p> <p>Autentication can be implemented by using any <code>third party Identity Provider</code> such as Auth0, Okta, Google, Facebook, etc.</p> <p>Those external managed identities has to be mapped to the internal <code>Identities</code> (Users, Groups, Roles) in the system.</p>"},{"location":"accounts/identities/identities/","title":"Identities","text":"<p>An <code>Identity Security</code> is a solution for securing all identities used in an account.</p> <p>There are mainly two types of identities:</p> <ul> <li>User and Groups</li> <li>Roles</li> </ul> <p>Using the <code>Token Service</code> it is possible to <code>swap</code> a third party token with an <code>autenticami</code> token.</p>"},{"location":"accounts/identities/identities/#principals","title":"Principals","text":"<p>A <code>Principal</code> is an human user or workload with granted permissions that authenticates and make requests, specifically:</p> <ul> <li>A user</li> <li>A role</li> <li>An assumed role (role assumed by a user or a role assumed by a workload).</li> </ul>"},{"location":"accounts/identities/roles/","title":"Roles","text":"<p>A <code>Role</code> is an identity within an account with associated permissions. A role can be temporaraly assumed by a <code>Principal</code> identity.</p>"},{"location":"accounts/identities/users-groups/","title":"Users and Groups","text":"<p><code>Users</code> and <code>Groups</code> are identities within an account.</p>"},{"location":"accounts/identities/users-groups/#users","title":"Users","text":"<p>A <code>User</code> is an identity representing a single person or FID (Function Identifier) that has specific permissions.</p>"},{"location":"accounts/identities/users-groups/#group","title":"Group","text":"<p>A <code>Group</code> is a collection of users with associated permissions. It is not possible to authenticate with a group, however the permissions associated with the group are inherited by all users who are members of the group.</p>"},{"location":"accounts/projects/actions/","title":"Actions","text":"<p>Actions are operations that can affect more than one resource.</p> <p>Actions must be uniquely identified and they look like <code>person:CreateTimesheet</code>.</p> <p>An <code>Action</code> is composed by two sections <code>{resource}:{action-name}</code>:</p> <ul> <li>Resource: Terget resource of the action</li> <li>ActionName: Name of the action.</li> </ul>"},{"location":"accounts/projects/project-domains/","title":"Domains","text":"<p>A project is divided into <code>domains</code>.</p>"},{"location":"accounts/projects/projects/","title":"Projects","text":"<p>An accounts can have multiple projects and each project is separate from the others.</p>"},{"location":"accounts/projects/resources/","title":"Resources","text":"<p>A resource represents a project's resource. For each resource, you can specify a collection of actions and tags.</p> <p>A resource is uniquely identified with an <code>UUR</code> (Universally unique resource) which looks like <code>uur:581616507495:default:hr-app:time-management:person/*</code>.</p> <p>An <code>UUR</code> is composed by multiple sections <code>uur:{account}:{tenant}:{project}:{domain}:{resource}/{resource-filter}</code>:</p> <ul> <li>Account: an <code>autenticami</code> account number</li> <li>Tenant: an <code>autenticami</code> tenant name</li> <li>Project: name of the project to which the resource belongs</li> <li>Domain: name of the domain to which the resource belongs</li> <li>Resource: resource type</li> <li>Resource Filter: resource filter.</li> </ul>"},{"location":"agents/","title":"Agents","text":"<p><code>Autenticami</code> is composed by several agents:</p> <ul> <li>AAP Agent</li> <li>IDP Agent</li> <li>PDP Agent</li> <li>PAP Agent</li> </ul>"},{"location":"agents/pdp-agent/","title":"PDP Agent","text":"<p>A <code>PDP</code> is responsible to expose the endpoints to check permissions.</p> <p>This agent can be run in two modes:</p> <ul> <li>LOCAL: This mode is used in contexts where you need to run a PDP node in close proximity with low latency, one use case is that of a sidecar.</li> <li>REMOTE: This mode is useful in contexts where you don't need to run the node in proximity.</li> </ul> <p>Here list of the environment variables that can be used to configure any of the pdp agent:</p> ENV VARIABLE VALUES DEFAULT DESCRIPTION AUTENTICAMI-ENVIRONMENT LOCAL Environment AUTENTICAMI_AGENT_APPDATA . Application data folder AUTENTICAMI_AGENT_PORT 9090 Application data folder"},{"location":"agents/pdp-agent/#local-configuration","title":"Local configuration","text":"<p>Below is the list of environment variables that can be used to configure a local pdp agent:</p> ENV VARIABLE VALUES DEFAULT DESCRIPTION AUTENTICAMI_AGENT_TYPE PDP-LOCAL PDP Agent running locally"},{"location":"agents/pdp-agent/#remote-configuration","title":"Remote configuration","text":"<p>Below is the list of environment variables that can be used to configure a remote pdp agent:</p> ENV VARIABLE VALUES DEFAULT DESCRIPTION AUTENTICAMI_AGENT_TYPE PDP-REMOTE PDP Agent running remotely"},{"location":"console-endpoints/console/","title":"Management Console","text":""},{"location":"console-endpoints/endpoints/","title":"Endpoints","text":""},{"location":"console-endpoints/endpoints/#account-management","title":"Account Management","text":"<p><code>Autenticami</code> implements a console for web access moreover it exposes api for the <code>Account Management</code>.</p> Name Type Endpoint <code>Management Console</code> WEB https://console.autenticami.com <code>Management Api</code> API https://accounts.autenticami.com/v1/management"},{"location":"console-endpoints/endpoints/#identity-and-access-management","title":"Identity and Access Management","text":"<p>Autenticami exposes api for <code>Identity and Access Management</code>.</p>"},{"location":"console-endpoints/endpoints/#identities","title":"Identities","text":"Name Type Endpoint <code>OAuth Authorization</code> API https://accounts.autenticami.com/v1/authorize <code>Device Authorization</code> API https://accounts.autenticami.com/v1/oauth/device/code <code>OAuth Token</code> API https://accounts.autenticami.com/v1/oauth/token <code>OAuth User Info</code> API https://accounts.autenticami.com/v1/userinfo <code>OpenID Configuration</code> API https://accounts.autenticami.com/v1/.well-known/openid-configuration <code>JSON Web Key Set</code> API https://accounts.autenticami.com/v1/.well-known/jwks.json"},{"location":"console-endpoints/endpoints/#access-management","title":"Access Management","text":"Name Type Endpoint <code>Accessible Apps</code> API https://accounts.autenticami.com/v1/ac/apps <code>Permissions</code> API https://accounts.autenticami.com/v1/ac/permissions <code>Action Evaluation</code> API https://accounts.autenticami.com/v1/ac/action"},{"location":"pep/","title":"Policy Enforcement Point (PEP)","text":"<p>A Policy Enforcement Point (PEP) is a component that is responsible for enforcing policies.</p>"},{"location":"secure/protect-your-resources/tokens/","title":"Token Based Authentication","text":"<p><code>Token based authentication</code> is a protocol which allows users to verify their identity and in return receive an unique access token.</p> <p>Autenticami uses <code>Json Web Tokens (JWTs)</code> and <code>Opaque tokens</code>, the main difference between JWTs and opaque tokens is that an unencrypted JWT can be interpreted by anybody that holds the token, whereas opaque tokens cannot.</p> <p>Tokens are returned by the token endpoint moreover they should be transmitted to the target endpoint via header or body only.</p> <p>Token types</p> <p>Tokens are wrapped into an envelope which contains three types of tokens:</p> <ul> <li>access_token: This token must be used to access private resources</li> <li>id_token: This token represents the Open ID token</li> <li>refresh_token: This token is used to refresh the access token</li> </ul> <pre><code>{\n    \"access_token\": \"eyJhbGciOi...L1LAA16KwijpaHg\",\n    \"id_token\":     \"eyJhbGciOi...l91loffOVwyhXDQ\",\n    \"scope\": \"openid profile email address phone\",\n    \"expires_in\": 86400,\n    \"token_type\": \"Bearer\"\n}\n</code></pre>"},{"location":"secure/protect-your-resources/tokens/#json-web-tokens-jwts","title":"Json Web Tokens (JWTs)","text":"<p><code>JSON Web Token (JWT)</code> is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a <code>JSON Web Signature (JWS)</code> structure or as the plaintext of a <code>JSON Web Encryption (JWE)</code> structure, enabling the claims to be digitally signed or integrity protected with a <code>Message Authentication Code (MAC)</code> and/or encrypted.</p> <p>RFC 7519: JSON Web Token (JWT)</p> <p>The RFC number 7519 describes in detail the JSON Web Token.</p>"},{"location":"secure/protect-your-resources/tokens/#creation","title":"Creation","text":"<p>To create a JWT, the following steps are performed. The order of the steps is not significant in cases where there are no dependencies between the inputs and outputs of the steps.</p> <ol> <li>Create a JWT Claims Set containing the desired claims. Note that whitespace is explicitly permitted in the representation and no canonicalization need be performed before encoding.</li> <li>Let the Message be the octets of the UTF-8 representation of the JWT Claims Set.</li> <li>Create a JOSE Header containing the desired set of Header Parameters. The JWT MUST conform to either the JWS or JWE specification. Note that whitespace is explicitly permitted in the representation and no canonicalization need be performed before encoding.</li> <li>Depending upon whether the JWT is a JWS or JWE, there are two cases:<ul> <li>If the JWT is a JWS, create a JWS using the Message as the JWS Payload; all steps specified in JWS for creating a JWS MUST be followed.</li> <li>Else, if the JWT is a JWE, create a JWE using the Message as the plaintext for the JWE; all steps specified in JWE for creating a JWE MUST be followed.</li> </ul> </li> <li>If a nested signing or encryption operation will be performed, let the Message be the JWS or JWE, and return to Step 3, using a \"cty\" (content type) value of \"JWT\" in the new JOSE Header created in that step.</li> <li>Otherwise, let the resulting JWT be the JWS or JWE.</li> </ol>"},{"location":"secure/protect-your-resources/tokens/#claims","title":"Claims","text":"<p>JWTs claims are piece of information asserted about a subject. Configuration with custom claimns should avoid name collisions.</p>"},{"location":"secure/protect-your-resources/tokens/#restricted-claims","title":"Restricted Claims","text":"<p>You can see a full list of registered claims at the IANA JSON Web Token Claims Registry.</p>"},{"location":"secure/protect-your-resources/tokens/access-token/","title":"Access Token","text":""},{"location":"secure/protect-your-resources/tokens/access-token/#sample-access-token","title":"Sample Access Token","text":"<p>Below an example of Access Token.</p> <pre><code>{\n  \"iss\": \"https://accounts.autenticami.com\",\n  \"sub\": \"autenticami|2424e2c98d394bda823bacc3d0e2ac0a\",\n  \"aud\": [\n     \"https://api./example.io\",\n     \"https://accounts.autenticami.com/userinfo\"\n  ],\n  \"nonce\": \"x-1B7_XsO6Kf\",\n  \"iat\": 1670436366,\n  \"exp\": 1670436371,\n  \"jti\": \"2e43cbbaab46436e9a530b8896d5c37d\",\n  \"client_id\": \"ddf8f1373c80486f923640257657fead\",\n  \"azp\": \"7a5f06df08064ec6b77bd115cfce390a\",\n  \"scope\": \"openid profile email address phone assume:*\",\n  \"gty\": \"password\"\n}\n</code></pre>"},{"location":"secure/protect-your-resources/tokens/id-token/","title":"ID Token","text":""},{"location":"secure/protect-your-resources/tokens/id-token/#sample-id-token","title":"Sample ID Token","text":"<p>Below an example of ID Token.</p> <pre><code>{\n  \"iss\": \"https://accounts.autenticami.com\",\n  \"sub\": \"autenticami|2424e2c98d394bda823bacc3d0e2ac0a\",\n  \"aud\": \"https://api./example.io\",\n  \"nonce\": \"x-1B7_XsO6Kf\",\n  \"iat\": 1670436366,\n  \"exp\": 1670436371,\n  \"auth_time\": 1670436366,\n  \"updated_at\": 1670436366,\n  \"nickname\": \"mario.rossi\",\n  \"name\": \"Mario Rossi\",\n  \"picture\": \"http://example.com/mario-rossi/me.jpg\",\n  \"given_name\": \"Mario\",\n  \"family_name\": \"Rossi\",\n  \"birthdate\": \"1978-03-10\",\n  \"email\": \"mario.rossi@example.com\",\n  \"email_verified\": false,\n}\n</code></pre>"},{"location":"secure/protect-your-resources/tokens/refresh-token/","title":"Refresh token","text":""},{"location":"secure/reference/rfcs/","title":"RFCs","text":""},{"location":"secure/reference/rfcs/#javascript-object-signing-and-encryption-jose","title":"JavaScript Object Signing and Encryption (JOSE)","text":"LINK TYPE RFC 7519: JSON Web Token (JWT) RFC RFC 7515: JSON Web Signature (JWS) RFC RFC 7516: JSON Web Encryption (JWE) RFC RFC 7517: JSON Web Key (JWK) RFC RFC 7518: JSON Web Algorithms (JWA) RFC JSON Web Token Claims LINK JSON Web Token (JWT) Profile for OAuth 2.0 Access Tokens LINK JSON Object Signing and Encryption (JOSE) LINK"},{"location":"secure/reference/tools/","title":"Useful JWT Tools","text":"LINK TYPE jwt.io TOOL jwt.ms TOOL github.com/gchq/CyberChef CODE github.com/gchq/CyberChef Demo TOOL scottbrady91.com/tools/jwt TOOL"}]}